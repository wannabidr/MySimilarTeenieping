---
description: 
globs: 
alwaysApply: false
---
# 나랑 닮은 티니핑 찾기 앱 개발 규칙

## 1. 개요

본 문서는 '나랑 닮은 티니핑 찾기' Android 애플리케이션 개발을 위한 규칙과 가이드라인을 정의합니다. TFLite를 사용하여 사용자 사진과 가장 닮은 티니핑 캐릭터를 찾아주는 기능을 핵심합니다.

## 2. 주요 기능

*   **사진 선택**: 갤러리에서 사진을 선택하거나 카메라로 직접 촬영합니다. (`SelectImageActivity`)
*   **이미지 업로드**: 선택된 사용자 이미지를 Firebase Storage에 업로드합니다.
*   **티니핑 분석**: 선택된 사진(또는 Storage URL)을 TFLite 모델을 사용하여 분석하고, 가장 닮은 티니핑 캐릭터를 찾습니다.
*   **결과 저장**: 분석 결과(텍스트 정보, Storage 이미지 URL 등)를 Firebase Firestore에 저장합니다.
*   **결과 표시**: 사용자 사진(Storage에서 로드), 닮은 티니핑 사진, 티니핑 이름 및 특징 설명을 보여줍니다. (`ResultActivity`)
*   **쇼핑 정보 연동**: 분석 결과와 관련된 티니핑 상품 정보를 네이버 쇼핑 등 외부 웹 브라우저로 연결합니다.
*   **분석 기록 (History)**: `MainActivity`의 Drawer 내에 Firebase Firestore에서 불러온 과거 분석 결과를 Composable 목록으로 시간순으로 표시하고, 선택 시 해당 결과 상세 보기(`ResultActivity`)로 이동합니다.

## 3. 도메인 클래스 정의

### 3.1. `UserImage.kt`

사용자가 선택하거나 촬영한 이미지 정보를 나타냅니다.

```kotlin
data class UserImage(
    val localFilePath: String,      // 로컬 파일 경로
    val fbFilePath: String, // Firebase Storage에 업로드된 이미지 URL
    val createdAt: Long        // 이미지 생성 또는 선택 시각 (타임스탬프)
)
```

### 3.2. `TeeniepingInfo.kt`

티니핑 캐릭터의 기본 정보를 나타냅니다.

```kotlin
@Keep
data class TeeniepingInfo(
    var id: String = "", // Firestore Document ID
    val name: String = "",          // 티니핑 이름
    val description: String = "",   // 티니핑 특징 설명 (필요시 ChatGPT 연동하여 생성)
    val imagePath: String = "",     // 티니핑 이미지 리소스 경로, assets 내 경로, 또는 Firebase Storage URL (분석 시점의 티니핑 이미지를 저장할 경우)
    val details: String? = null // (Optional) 티니핑 관련 추가 정보 (등장 에피소드 등)
)
```

### 3.3. `AnalysisResult.kt`

이미지 분석 결과를 저장하고 관리합니다. 이 데이터는 Firebase Firestore에 저장됩니다.

```kotlin
// Firestore에 저장될 문서 구조와 유사
@Keep // Proguard 규칙 자동 생성을 위해 필요할 수 있음 (Firebase)
data class AnalysisResult(
    var id: String = "", // Firestore 문서 ID (자동 생성 또는 직접 할당)
    val userImage: UserImage,           // 사용자가 입력한 이미지 정보 (URL 포함)
    val similarTeenieping: TeeniepingInfo, // 가장 닮은 티니핑 정보 (이미지 URL 포함 가능)
    val similarityScore: Float = 0.0f,
    val analysisTimestamp: Long = 0L,
) {
    // Firestore 연동을 위한 기본 생성자 (필수)
    constructor() : this("", UserImage("",0L), TeeniepingInfo("", "", ""), 0.0f, 0L)
}
```

### 3.4. `ShoppingLink.kt`

티니핑 관련 상품 쇼핑 링크 정보를 나타냅니다. (AnalysisResult에 포함되거나 별도 관리)

```kotlin
data class ShoppingLink(
    val itemName: String,          // 상품명
    val itemImageUrl: String? = null, // (Optional) 상품 이미지 URL
    val storeName: String,         // 판매처 (예: "네이버 쇼핑")
    val linkUrl: String            // 상품 페이지 URL
)
```

## 4. 파일 및 패키지 구조

```
MySimilarTeenieping/
├── app/
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/
│   │   │   │   └── com/sss/mysimilarteenieping/  # 실제 패키지명으로 변경 필요
│   │   │   │       ├── MainActivity.kt
│   │   │   │       ├── SelectImageActivity.kt
│   │   │   │       ├── ResultActivity.kt
│   │   │   │       ├── MySimilarTeeniepingApp.kt
│   │   │   │       │
│   │   │   │       ├── data/
│   │   │   │       │   ├── model/                    # 도메인 모델 클래스
│   │   │   │       │   ├── repository/               # 데이터 저장소 인터페이스 및 구현
│   │   │   │       │   │   ├── HistoryRepository.kt    # Firestore 및 Storage 연동
│   │   │   │       │   │   └── TeeniepingRepository.kt # 티니핑 기본 정보 (assets 또는 Firestore)
│   │   │   │       │   └── remote/                   # 원격 데이터 소스 서비스
│   │   │   │       │       ├── FirebaseService.kt    # Firestore, Firebase Storage 관련 로직 통합 (또는 분리)
│   │   │   │       │       └── ChatGptApiService.kt  # (선택 사항)
│   │   │   │       │
│   │   │   │       ├── domain/
│   │   │   │       │   └── usecase/
│   │   │   │       │
│   │   │   │       ├── ui/
│   │   │   │       │   ├── main/
│   │   │   │       │   │   ├── MainViewModel.kt
│   │   │   │       │   │   └── composables/
│   │   │   │       │   ├── select/
│   │   │   │       │   │   ├── SelectImageViewModel.kt
│   │   │   │       │   │   └── composables/
│   │   │   │       │   ├── result/
│   │   │   │       │   │   ├── ResultViewModel.kt
│   │   │   │       │   │   └── composables/
│   │   │   │       │   ├── theme/
│   │   │   │       │   └── common/
│   │   │   │       │
│   │   │   │       ├── ml/
│   │   │   │       │   └── TeeniepingClassifier.kt
│   │   │   │       │
│   │   │   │       ├── di/
│   │   │   │       │   ├── AppModule.kt
│   │   │   │       │   ├── ViewModelModule.kt
│   │   │   │       │   └── RepositoryModule.kt
│   │   │   │       │
│   │   │   │       └── util/
│   │   │   │
│   │   │   ├── res/
│   │   │   │   ├── drawable/
│   │   │   │   ├── values/
│   │   │   │   └── mipmap/
│   │   │   │
│   │   │   ├── assets/
│   │   │   │   ├── model.tflite
│   │   │   │   └── teenieping_data.json             # 티니핑 기본 정보 (또는 Firestore에서 관리)
│   │   │   │
│   │   │   └── AndroidManifest.xml
│   │   │
│   │   ├── test/
│   │   └── androidTest/
│   │
│   ├── build.gradle.kts
│
├── build.gradle.kts
├── settings.gradle.kts
├── gradle.properties
└── .cursor/
    └── rules/
        └── rules.mdc
```

## 5. 기술 스택

*   **언어**: Kotlin
*   **아키텍처**: MVVM (Model-View-ViewModel) (hiltViewModel)
*   **UI**: Jetpack Compose
*   **화면 전환**: `Activity` 간 `Intent` 사용
*   **비동기 처리**: Coroutines + Flow
*   **의존성 주입**: Hilt
*   **데이터베이스**: Firebase Firestore (분석 결과 및 메타데이터 저장)
*   **파일 스토리지**: Firebase Storage (사용자 이미지 및 결과 이미지 저장)
*   **네트워킹**: Retrofit (ChatGPT 연동 시)
*   **이미지 로딩**: Glide (Compose와 호환, Firebase Storage URL 로딩 지원)
*   **머신러닝**: TensorFlow Lite for Android

## 7. 코딩 스타일 및 규칙

*   Kotlin 공식 코딩 컨벤션을 따릅니다.
*   Android KTX 라이브러리를 적극 활용합니다.
*   주석은 필요한 경우에만 명확하게 작성합니다.
*   커밋 메시지는 명확하고 일관성 있게 작성합니다. (예: `feat: Integrate Firebase for history`)

### 7.1. 명명 규칙 (Naming Conventions)

*   **패키지 (Packages)**: 소문자, 연속된 단어는 밑줄(`_`) 없이 모두 붙여 사용합니다.
    *   예: `com.sss.mysimilarteenieping.data.repository`
*   **클래스 및 인터페이스 (Classes and Interfaces)**: 파스칼 표기법(PascalCase)을 사용합니다.
    *   예: `AnalysisResult`, `HistoryRepository`, `MainViewModel`
*   **함수 (Functions)**: 카멜 표기법(camelCase)을 사용합니다.
    *   예: `getAnalysisHistory`, `saveResultToFirestore`
*   **변수 (Variables)**:
    *   일반 변수 및 매개변수: 카멜 표기법(camelCase)을 사용합니다.
        *   예: `userImage`, `similarityScore`
    *   상수 (Constants - `const val` 또는 `object` 내의 `val`): 대문자 스네이크 표기법(UPPER_SNAKE_CASE)을 사용합니다.
        *   예: `MAX_RESULTS`, `DEFAULT_TIMEOUT`
*   **Composable 함수**: 파스칼 표기법(PascalCase)을 따르며, 명사형 또는 동사구로 작성될 수 있습니다. 일반 함수와 구분하기 위해 `@Composable` 어노테이션을 반드시 붙입니다.
    *   예: `UserProfileScreen`, `CircularLoadingIndicator`
*   **Layout 파일 (XML - 거의 사용하지 않지만, 필요한 경우)**: 스네이크 표기법(snake_case)을 사용합니다.
    *   예: `activity_main.xml`, `item_history_entry.xml`
*   **리소스 ID (XML - Drawable, String 등)**: 스네이크 표기법(snake_case)을 사용합니다.
    *   예: `ic_camera`, `text_welcome_message`, `color_primary`

### 7.2. 들여쓰기 (Indentation)

*   **Kotlin**: 4칸 공백(space)을 사용합니다. 탭(tab) 문자는 사용하지 않습니다.
*   **XML**: 4칸 공백(space)을 사용합니다.
*   Android Studio의 기본 설정을 따르는 것을 권장합니다.

### 7.3. 코드 형식 (Code Formatting)

*   **줄 길이 (Line length)**: 한 줄의 최대 길이는 100자 (또는 120자, 팀 내 합의)를 넘지 않도록 합니다. Android Studio에서 설정 가능합니다.
*   **중괄호 (Braces)**: `if`, `else`, `for`, `while`, `when` 등의 제어문에서는 한 줄짜리 본문이라도 중괄호를 사용하는 것을 권장합니다.
    ```kotlin
    // 권장
    if (condition) {
        doSomething()
    }

    // 비권장
    if (condition) doSomething()
    ```
*   **빈 줄 (Blank lines)**: 논리적인 코드 블록 사이, 함수 정의 사이, 클래스 내 메서드 그룹 사이에 적절한 빈 줄을 사용하여 가독성을 높입니다.
*   **import 문 최적화**: Android Studio의 "Optimize Imports" 기능을 주기적으로 사용하여 불필요한 import 문을 제거하고 순서를 정리합니다. (Ctrl+Alt+O / Cmd+Option+O)

### 7.4. Kotlin 특정 스타일 가이드

*   **불변성 (Immutability)**: 가능한 경우 `val`을 사용하여 불변 변수를 선언하고, 변경이 필요한 경우에만 `var`를 사용합니다. `List` 대신 `ImmutableList`, `Map` 대신 `ImmutableMap` 등을 고려합니다 (Kotlinx Collections 라이브러리).
*   **스코프 함수 (Scope Functions)**: `let`, `run`, `with`, `apply`, `also` 등의 스코프 함수는 명확한 목적과 컨텍스트에서 사용하여 가독성을 해치지 않도록 주의합니다.
*   **널 안정성 (Null Safety)**: Nullable 타입(`?`)을 신중하게 사용하고, 불필요한 `!!` (non-null asserted) 연산자 사용을 지양합니다. `?.` (safe call), `?:` (Elvis operator), `let` 등을 활용합니다.
*   **타입 추론 (Type Inference)**: 변수 타입이 명확하게 추론될 수 있는 경우 타입을 생략할 수 있지만, API 경계나 가독성이 중요한 부분에서는 명시적으로 타입을 지정하는 것이 좋습니다.
*   **람다 표현식 (Lambda Expressions)**:
    *   마지막 매개변수가 함수 타입인 경우, 람다를 괄호 밖으로 빼낼 수 있습니다.
    *   매개변수가 하나뿐이고 사용하지 않는 경우 `_`로 대체할 수 있습니다.
    *   명시적인 `return` 레이블을 사용하여 복잡한 람다의 가독성을 높일 수 있습니다.
*   **데이터 클래스 (Data Classes)**: 상태를 보유하는 단순한 클래스에는 `data class`를 사용합니다. `toString()`, `equals()`, `hashCode()`, `copy()` 등이 자동으로 생성됩니다.
*   **확장 함수 (Extension Functions)**: 기존 클래스에 새로운 기능을 추가할 때 유용하게 사용될 수 있으나, 무분별한 사용은 코드 이해를 어렵게 할 수 있으므로 적절한 범위 내에서 사용합니다.

### 7.5. Jetpack Compose 특정 스타일 가이드

*   **단일 책임 원칙 (Single Responsibility Principle)**: 각 Composable 함수는 하나의 UI 요소를 그리거나 특정 로직을 처리하는 데 집중합니다. 너무 많은 역할을 하는 거대한 Composable 함수는 피합니다.
*   **상태 호이스팅 (State Hoisting)**: 상태(state)와 상태를 수정하는 로직(event)을 가능한 한 상위 Composable로 끌어올려, 하위 Composable은 상태를 받아 표시하고 이벤트를 전달하는 역할만 하도록 합니다 (Stateless Composables).
*   **재사용성 (Reusability)**: 공통적으로 사용될 수 있는 UI 요소는 별도의 Composable 함수로 분리하여 재사용성을 높입니다.
*   **미리보기 (Preview)**: `@Preview` 어노테이션을 적극 활용하여 다양한 상태와 테마에 대한 Composable의 모습을 미리 확인하고 개발합니다.
*   **Modifier 사용**: UI 요소의 배치, 패딩, 클릭 이벤트 처리 등은 `Modifier`를 통해 일관된 방식으로 처리합니다. `Modifier`는 매개변수 순서상 앞쪽에 위치하는 것을 권장합니다.
*   **성능 고려**: 불필요한 리컴포지션(recomposition)을 피하기 위해 Composable 함수의 매개변수로 안정적인(stable) 타입을 사용하고, `remember`를 적절히 활용합니다. 복잡한 계산은 Composable 함수 외부나 `remember` 블록 내에서 수행합니다.
